// This file was created by Filewrap 1.1
// Little endian mode
// DO NOT EDIT

#include "../PVRTMemoryFileSystem.h"

// using 32 bit to guarantee alignment.
#ifndef A32BIT
 #define A32BIT static const unsigned int
#endif

// ******** Start: effects.pfx ********

// File data
static const char _effects_pfx[] = 
	"[HEADER]\r\n"
	"    VERSION     01.00.00.00\r\n"
	"    DESCRIPTION OGLES2ToneMapping\r\n"
	"    COPYRIGHT   Imagination Technologies\r\n"
	"[/HEADER]\r\n"
	"\r\n"
	"[TEXTURE]\r\n"
	"    NAME          hdrscene\r\n"
	"    PATH          hdrscene.pvr\r\n"
	"[/TEXTURE]\r\n"
	"\r\n"
	"// **********************************************************\r\n"
	"// @Function       Linear\r\n"
	"// @Description    A simple linear operator with gamma\r\n"
	"//                 correction.\r\n"
	"// **********************************************************\r\n"
	"[EFFECT]\r\n"
	"    NAME \t    Linear\r\n"
	"\t\t\r\n"
	"    UNIFORM     uWorldViewProjMatrix   WORLDVIEWPROJECTION\r\n"
	"    UNIFORM     texture                TEXTURE0\r\n"
	"    UNIFORM     exposure               EXPOSURE\r\n"
	"    ATTRIBUTE   inVertex               POSITION\r\n"
	"    ATTRIBUTE   inUV\t\t\t\t    UV\r\n"
	"\t\r\n"
	"    TEXTURE     0                      hdrscene\r\n"
	"\t\r\n"
	"    // SHADERS\r\n"
	"    VERTEXSHADER   VertexShader\r\n"
	"    FRAGMENTSHADER LinearShader\r\n"
	"[/EFFECT]\r\n"
	"[FRAGMENTSHADER] \r\n"
	"    NAME \t\tLinearShader \r\n"
	"\r\n"
	"    [GLSL_CODE]\r\n"
	"        uniform  sampler2D      texture;\r\n"
	"        uniform  mediump float  exposure;\r\n"
	"        varying  lowp    vec2   texCoords;\r\n"
	"\r\n"
	"        const mediump float c_fPow = 1.0/2.2;\r\n"
	"        const mediump vec3  c_vPow = vec3(c_fPow,c_fPow,c_fPow);\r\n"
	"        void main()\r\n"
	"        {\r\n"
	"            mediump vec3 vCol = texture2D(texture, texCoords).rgb;\r\n"
	"            vCol             *= exposure;\r\n"
	"            gl_FragColor      = vec4(pow(vCol, c_vPow), 1.0);\r\n"
	"        }\r\n"
	"    [/GLSL_CODE]\r\n"
	"[/FRAGMENTSHADER]\r\n"
	"\r\n"
	"// **********************************************************\r\n"
	"// @Function       Reinhard\r\n"
	"// @Description    Reinhard operator\r\n"
	"// **********************************************************\r\n"
	"[EFFECT]\r\n"
	"    NAME \t    Reinhard\r\n"
	"\t\t\r\n"
	"    UNIFORM     uWorldViewProjMatrix   WORLDVIEWPROJECTION\r\n"
	"    UNIFORM     texture                TEXTURE0\r\n"
	"    UNIFORM     exposure               EXPOSURE\r\n"
	"    ATTRIBUTE   inVertex               POSITION\r\n"
	"    ATTRIBUTE   inUV\t\t\t\t    UV\r\n"
	"\t\r\n"
	"    TEXTURE     0                      hdrscene\r\n"
	"\t\r\n"
	"    // SHADERS\r\n"
	"    VERTEXSHADER   VertexShader\r\n"
	"    FRAGMENTSHADER ReinhardShader\r\n"
	"[/EFFECT]\r\n"
	"[FRAGMENTSHADER] \r\n"
	"    NAME \t\tReinhardShader \r\n"
	"\r\n"
	"    [GLSL_CODE]\r\n"
	"        uniform  sampler2D      texture;\r\n"
	"        uniform  mediump float  exposure;\r\n"
	"        varying  lowp    vec2   texCoords;\r\n"
	"\r\n"
	"        const mediump float c_fPow = 1.0/2.2;\r\n"
	"        const mediump vec3  c_vPow = vec3(c_fPow,c_fPow,c_fPow);\r\n"
	"        void main()\r\n"
	"        {\r\n"
	"            mediump vec3 vCol = texture2D(texture, texCoords).rgb;\r\n"
	"            vCol             *= exposure;\r\n"
	"            vCol              = vCol / (1.0 + vCol);\r\n"
	"            gl_FragColor      = vec4(pow(vCol, c_vPow), 1.0);\r\n"
	"        }\r\n"
	"    [/GLSL_CODE]\r\n"
	"[/FRAGMENTSHADER]\r\n"
	"\r\n"
	"// **********************************************************\r\n"
	"// @Function       Hejl & Burgess-Dawson\r\n"
	"// @Description    An optimized formula by Jim Hejl and\r\n"
	"//                 Richard Burgess-Dawson.\r\n"
	"// **********************************************************\r\n"
	"[EFFECT]\r\n"
	"    NAME \t    HejlBurgessDawson\r\n"
	"\t\t\r\n"
	"    UNIFORM     uWorldViewProjMatrix   WORLDVIEWPROJECTION\r\n"
	"    UNIFORM     texture                TEXTURE0\r\n"
	"    UNIFORM     exposure               EXPOSURE\r\n"
	"    ATTRIBUTE   inVertex               POSITION\r\n"
	"    ATTRIBUTE   inUV\t\t\t\t    UV\r\n"
	"\t\r\n"
	"    TEXTURE     0                      hdrscene\r\n"
	"\t\r\n"
	"    // SHADERS\r\n"
	"    VERTEXSHADER   VertexShader\r\n"
	"    FRAGMENTSHADER HejlBurgessDawsonShader\r\n"
	"[/EFFECT]\r\n"
	"[FRAGMENTSHADER] \r\n"
	"    NAME \t\tHejlBurgessDawsonShader \r\n"
	"\r\n"
	"    [GLSL_CODE]\r\n"
	"        uniform  sampler2D      texture;\r\n"
	"        uniform  mediump float  exposure;\r\n"
	"        varying  lowp    vec2   texCoords;\r\n"
	"        \r\n"
	"        mediump vec3 Op(mediump vec3 x)\r\n"
	"        {\r\n"
	"            return (x * (6.2 * x + 0.5)) / (x * (6.2 * x + 1.7) + 0.06);\r\n"
	"        }\r\n"
	"        \r\n"
	"        void main()\r\n"
	"        {\r\n"
	"            mediump vec3 vCol = texture2D(texture, texCoords).rgb;\r\n"
	"            vCol             *= exposure;\r\n"
	"            vCol              = max(vCol-0.004, 0.0);\r\n"
	"            gl_FragColor      = vec4(Op(vCol), 1.0);\r\n"
	"        }\r\n"
	"    [/GLSL_CODE]\r\n"
	"[/FRAGMENTSHADER]\r\n"
	"\r\n"
	"// **********************************************************\r\n"
	"// @Function       Uncharted2\r\n"
	"// @Description    An operator created by John Hable of\r\n"
	"//                 www.filmicgames.com\r\n"
	"// **********************************************************\r\n"
	"[EFFECT]\r\n"
	"    NAME \t    Uncharted2\r\n"
	"\t\t\r\n"
	"    UNIFORM     uWorldViewProjMatrix   WORLDVIEWPROJECTION\r\n"
	"    UNIFORM     texture                TEXTURE0\r\n"
	"    UNIFORM     exposure               EXPOSURE\r\n"
	"    ATTRIBUTE   inVertex               POSITION\r\n"
	"    ATTRIBUTE   inUV\t\t\t\t    UV\r\n"
	"\t\r\n"
	"    TEXTURE     0                      hdrscene\r\n"
	"\t\r\n"
	"    // SHADERS\r\n"
	"    VERTEXSHADER   VertexShader\r\n"
	"    FRAGMENTSHADER Uncharted2Shader\r\n"
	"[/EFFECT]\r\n"
	"[FRAGMENTSHADER] \r\n"
	"    NAME \t\tUncharted2Shader\r\n"
	"\r\n"
	"    [GLSL_CODE]\r\n"
	"        uniform  sampler2D      texture;\r\n"
	"        uniform  mediump float  exposure;\r\n"
	"        varying  lowp    vec2   texCoords;\r\n"
	"\r\n"
	"        const mediump float c_fPow  = 1.0/2.2;\r\n"
	"        const mediump vec3  c_vPow  = vec3(c_fPow,c_fPow,c_fPow);\r\n"
	"        const mediump float c_fBias = 2.0;\r\n"
	"        const mediump float A = 0.15;\r\n"
	"        const mediump float B = 0.50;\r\n"
	"        const mediump float C = 0.10;\r\n"
	"        const mediump float D = 0.20;\r\n"
	"        const mediump float E = 0.02;\r\n"
	"        const mediump float F = 0.30;\r\n"
	"        const mediump vec3 whiteScale = vec3(1.37906, 1.37906, 1.37906);        // Pre-calculated white scale\r\n"
	"        \r\n"
	"        mediump vec3 Uncharted2Tonemap(mediump vec3 x)\r\n"
	"        {\r\n"
	"            return ((x*(A*x + C*B) + D*E) / (x*(A*x + B)+D*F)) - E/F;\r\n"
	"        }\r\n"
	"        \r\n"
	"        void main()\r\n"
	"        {\r\n"
	"            mediump vec3 vCol = texture2D(texture, texCoords).rgb;\r\n"
	"            mediump vec3 x    = (c_fBias * (vCol * exposure));            \r\n"
	"            mediump vec3 R    = Uncharted2Tonemap(x);\r\n"
	"            vCol              = R * whiteScale;\r\n"
	"            \r\n"
	"            gl_FragColor      = vec4(pow(vCol, c_vPow), 1.0);\r\n"
	"        }\r\n"
	"    [/GLSL_CODE]\r\n"
	"[/FRAGMENTSHADER]\r\n"
	"\r\n"
	"// **********************************************************\r\n"
	"// Shared vertex shader\r\n"
	"// **********************************************************\r\n"
	"[VERTEXSHADER]\r\n"
	"\tNAME \t\t   VertexShader\r\n"
	"\r\n"
	"\t[GLSL_CODE]\r\n"
	"\t\tattribute highp   vec4  inVertex;\r\n"
	"\t\tattribute mediump vec2  inUV;\r\n"
	"\t\tuniform   highp   mat4  uWorldViewProjMatrix;\r\n"
	"\t\tvarying   lowp    vec2  texCoords;\r\n"
	"\t\t\r\n"
	"\t\tvoid main() \r\n"
	"\t\t{ \r\n"
	"\t\t\tgl_Position  = uWorldViewProjMatrix * inVertex;\r\n"
	"\t\t\ttexCoords    = inUV;\r\n"
	"\t\t} \r\n"
	"\t[/GLSL_CODE]\r\n"
	"[/VERTEXSHADER]\r\n";

// Register effects.pfx in memory file system at application startup time
static CPVRTMemoryFileSystem RegisterFile_effects_pfx("effects.pfx", _effects_pfx, 6528);

// ******** End: effects.pfx ********

